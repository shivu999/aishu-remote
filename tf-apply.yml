parameters:
- name: environment_acronym
  type: string
  default: ''
- name: service_connection
  type: string
  default: ''
  
 steps:
- powershell: |
   if ($env:SYSTEM_STAGEDISPLAYNAME -like "*Development*")
   {
     write-output "Deployment is to Development, therefore deployment does not have to be from master branch."
   }
   elseif ($env:BUILD_SOURCEBRANCHNAME -ne "master")
   {
     write-output "##vso[task.LogIssue type=error;]Deployment to $env:SYSTEM_STAGEDISPLAYNAME must only be from the master branch."
     exit 1
   }
   else
   {
     write-output "Deployment is from master."
   }
  displayName: 'Check Deployment Is From The Master Branch'

steps:
- task: DownloadPipelineArtifact@2
  inputs:
    buildType: 'current'
    artifactName: '_$(Build.DefinitionName)'
    targetPath: '$(System.DefaultWorkingDirectory)'

- task: replacetokens@3
  inputs:
    rootDirectory: '$(System.DefaultWorkingDirectory)/$(terraform_project_folder_name)'
    targetFiles: |
      **/*.tf
      **/*.tfvars
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    tokenPrefix: '__'
    tokenSuffix: '__'
    useLegacyPattern: false
    enableTelemetry: true

- task: AzureCLI@1
  displayName: 'Terraform Init'
  inputs:
    scriptLocation: inlineScript
    workingDirectory: '$(System.DefaultWorkingDirectory)/$(terraform_project_folder_name)'
    inlineScript: 'terraform12 init'
    azureSubscription: ${{parameters.service_connection}}

- task: AzureCLI@1
  displayName: 'Download Terraform Plan to Agent'
  inputs:
    azureSubscription: ${{parameters.service_connection}}
    scriptLocation: inlineScript
    inlineScript: 'az storage blob download --account-name $(TerraformStateStorageAccount) --account-key $(TerraformStateStorageAccountKey) --container-name terraformplancontainer --name plan_${{parameters.environment_acronym}}_$(Build.BuildNumber).tfplan --file .\plan_${{parameters.environment_acronym}}_$(Build.BuildNumber).tfplan --auth-mode key'
    workingDirectory: '$(System.DefaultWorkingDirectory)/$(terraform_project_folder_name)'

- task: AzureCLI@1
  displayName: 'Terraform apply'
  condition: succeeded()
  inputs:
    scriptLocation: inlineScript
    workingDirectory: '$(System.DefaultWorkingDirectory)/$(terraform_project_folder_name)'
    inlineScript: 'terraform12 apply -input=false "plan_${{parameters.environment_acronym}}_$(Build.BuildNumber).tfplan"'
    azureSubscription: ${{parameters.service_connection}}
